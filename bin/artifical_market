#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# This is a sample program to test artificial marcket game.

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'optparse'

require 'minority_game'
require 'minority_game/game/artificial_market'
require 'minority_game/player/artificial_market_player'

include MinorityGame

# default args
d, m, n, r, s, t = false, DEFAULT_M, DEFAULT_N, 0, DEFAULT_S, DEFAULT_T
ch, hi, si = 3, 1, 1
a, b, g = DEFAULT_ALPHA, DEFAULT_BETA, DEFAULT_GAMMA

# Parse command line options.
OptionParser.new do |o|
  o.on("-a ALPHA", "--alpha=ALPHA",
       "specify a learning speed alpha [0.0 - 1.0]") {|v| a = v.to_f}
  o.on("-b BETA", "--beta=BETA",
       "specify a beta that is learning speed of other player model.") {|v|
    b = v.to_f}
  o.on("-c CHARTIST", "--chartist=CHARTIST",
       "specify a number of chartist agent.") {|v| ch = v.to_i}
  o.on("-d", "--debug", "debug option") {|v| d = v}
  o.on("-g GAMMA", "--gamma=GAMMA",
       "specify a gamma that is updating speed of reward.") {|v| g = v.to_f}
  o.on("-h HAND_IMITATOR", "--hand_imitator=HAND_IMITATOR",
       "specify a number of hand imitator agent.") {|v| hi = v.to_i}
  o.on("-i STRATEGY_IMITATOR", "--strategy_imitator=STRATEGY_IMITATOR",
       "specify a number of strategy imitator agent.") {|v| si = v.to_i}
  o.on("-m MEMORY", "--memory=MEMORY", "specify a memory size of the number " +
       "of the history that players store") {|v| m = v.to_i}
  o.on("-n NUM_PLAYER", "--number=NUM_PLAYER",
       "specify a number of the players") {|v| n = v.to_i}
  o.on("-r RANDSEED", "--randseed=RANDSEED",
       "specify a random seed number.") {|v| r = v.to_i}
  o.on("-s STRATEGY", "--strategy=STRATEGY", "specify a number of strateges " +
       "that players have") {|v| s = v.to_i}
  o.on("-t TRIAL", "--trial=TRIAL", "specify a number of the trial thath the " +
       "game is examined") {|v| t = v.to_i}
  begin
    o.parse!
  rescue
    STDERR.puts "Invalid option!"
    STDERR.puts "#{o}"
    exit
  end
end

puts "--- initial settings ---"
puts "m: #{m}, n: #{n}, randseed: #{r}, s: #{s}, t: #{t}"
puts "chartist: #{ch}, hand imitator: #{hi}, strategy imitator: #{si}"
puts "alpha: #{a}, beta: #{b}, gamma: #{g}"
puts "--- outputs ---"

# initialize the artificial marcket game
g = MinorityGame::ArtificialMarketGame.new(m, n, s, r,
                                           {number_of_ch: ch,
                                            number_of_hi: hi,
                                            number_of_si: si,
                                            number_of_pp: 0,
                                            alpha: a,
                                            beta: b,
                                            gamma: g})
# examine the game!
g.examine(t)

# print the state of players
g.players.each { |p| puts p } if d

# mean of the number of winners.
mean_winners = 1.0 * g.n_winner_history.inject(:+) / g.n_winner_history.length
puts "mean winners: #{mean_winners}"

# standard diviation of the number of winners.
diviation_winners = Math.sqrt(g.n_winner_history.inject(0) {|sum, i|
    sum += (mean_winners - i) ** 2} / g.n_winner_history.length)
puts "diviation winners: #{diviation_winners}"

# sorted number of wins each player.
wins = ((g.players.inject([]) {|aa, p| aa.push((p.reward + t) / 2)}).sort)
  .reverse
puts "rank of wins each players #{wins}" if d

# strategy
strategy_continuous_use = []
g.players.each do |player|
  next unless player.instance_of?(MinorityGame::ChartistPlayer)
  pscu = []
  cs = player.strategy_history[0]
  count = 1
  player.strategy_history[1..player.strategy_history.length - 1].each do |st|
    if st != cs
      pscu.push(count)
      cs = st
      count = 1
    else
      count += 1
    end
  end
  strategy_continuous_use.push(pscu)
end

# this array stores how many times players use same strategy.
puts "strategy_continuous_use of Chartist: #{strategy_continuous_use}" if d

puts "number of winners each process: #{g.n_winner_history}" if d


ar_ch = g.get_average_reward_with_type("ChartistPlayer")
ar_hi = g.get_average_reward_with_type("HandImitatorPlayer")
ar_si = g.get_average_reward_with_type("StrategyImitatorPlayer")
#ar_pp = g.get_average_reward_with_type("PerfectPredictorPlayer")
puts "average reward CH: #{ar_ch}, HI: #{ar_hi}, SI: #{ar_si}"

ar_hi += 100.0 - ar_ch
ar_si += 100.0 - ar_ch
#ar_pp += 100.0 - ar_ch
ar_ch = 100.0
puts "average reward CH: #{ar_ch}, HI: #{ar_hi}, SI: #{ar_si}"
